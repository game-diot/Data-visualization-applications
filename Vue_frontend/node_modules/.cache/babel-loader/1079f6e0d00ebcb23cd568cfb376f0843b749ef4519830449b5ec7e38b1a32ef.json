{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  data() {\n    return {};\n  },\n  methods: {},\n  // 在Vue组件的mounted钩子中\n  mounted() {\n    // 1. 获取所有需要观察的章节元素\n    const sections = document.querySelectorAll('.content-section');\n\n    // 2. 创建观察器\n    this.observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          // 3. 当元素进入视口时，更新导航状态\n          const activeId = entry.target.getAttribute('id');\n          this.activeNav = activeId; // 更新data中的activeNav\n        }\n      });\n    }, {\n      threshold: 0.5,\n      // 当50%元素进入视口时触发\n      rootMargin: '0px 0px -50% 0px' // 底部提前50%视口高度触发\n    });\n    // 4. 开始观察所有章节\n    sections.forEach(section => {\n      this.observer.observe(section);\n    });\n  },\n  // 5. 组件销毁时断开观察\n  beforeUnmount() {\n    this.observer?.disconnect();\n  }\n};","map":{"version":3,"names":["data","methods","mounted","sections","document","querySelectorAll","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","activeId","target","getAttribute","activeNav","threshold","rootMargin","section","observe","beforeUnmount","disconnect"],"sources":["src/views/AboutView.vue"],"sourcesContent":["<template>\n <div class=\"lrflex\">\n     <div class=\"nav\">  </div>\n     <div class=\"rContainer\">\n        <div class=\"nav-c\"></div>\n        <div class=\"container\">\n            <router-view></router-view>\n        </div>\n     </div>\n    \n </div>\n          \n</template>\n<script>\n \n export default {\n        data(){\n            return {\n            \n            }\n        },\n        methods:{\n         \n        },\n        // 在Vue组件的mounted钩子中\nmounted() {\n         // 1. 获取所有需要观察的章节元素\n         const sections = document.querySelectorAll('.content-section');\n         \n         // 2. 创建观察器\n         this.observer = new IntersectionObserver(\n            (entries) => {\n               entries.forEach(entry => {\n               if (entry.isIntersecting) {\n                  // 3. 当元素进入视口时，更新导航状态\n                  const activeId = entry.target.getAttribute('id');\n                  this.activeNav = activeId; // 更新data中的activeNav\n               }\n               });\n            },\n            {\n               threshold: 0.5, // 当50%元素进入视口时触发\n               rootMargin: '0px 0px -50% 0px' // 底部提前50%视口高度触发\n            }\n            );\n            // 4. 开始观察所有章节\n            sections.forEach(section => {\n               this.observer.observe(section);\n            });\n            },\n            // 5. 组件销毁时断开观察\n            beforeUnmount() {\n            this.observer?.disconnect();\n            }\n        \n    }\n\n</script>\n<style>\n   .nav{\n     background-color: aqua;\n     height: 100vh;\n     width:15vw;\n   }\n   .nav-c{\n      background-color: rgb(173, 104, 1);\n      width: 100%;\n      height: 10%;\n   }\n   .container{\n      background-color: rgb(235, 235, 241);\n      width: 100%;\n      height: 90%;\n   }\n   .lrflex{\n      display: flex;\n      gap:0;\n   }\n   .rContainer{\n     height:100vh;\n     width:85vw;\n     position: relative;\n   }\n</style>\n\n\n\n\n"],"mappings":";;AAeA;EACAA,KAAA;IACA,QAEA;EACA;EACAC,OAAA,GAEA;EACA;EACAC,QAAA;IACA;IACA,MAAAC,QAAA,GAAAC,QAAA,CAAAC,gBAAA;;IAEA;IACA,KAAAC,QAAA,OAAAC,oBAAA,CACAC,OAAA;MACAA,OAAA,CAAAC,OAAA,CAAAC,KAAA;QACA,IAAAA,KAAA,CAAAC,cAAA;UACA;UACA,MAAAC,QAAA,GAAAF,KAAA,CAAAG,MAAA,CAAAC,YAAA;UACA,KAAAC,SAAA,GAAAH,QAAA;QACA;MACA;IACA,GACA;MACAI,SAAA;MAAA;MACAC,UAAA;IACA,CACA;IACA;IACAd,QAAA,CAAAM,OAAA,CAAAS,OAAA;MACA,KAAAZ,QAAA,CAAAa,OAAA,CAAAD,OAAA;IACA;EACA;EACA;EACAE,cAAA;IACA,KAAAd,QAAA,EAAAe,UAAA;EACA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}